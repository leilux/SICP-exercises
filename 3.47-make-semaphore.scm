; 3.47
(load "book\p235-make-mutex.scm")

; a)
(define (make-semaphore n)
  (let ((mutex (make-mutex)))
	(define (acquire)
	  (mutex 'acquire)
	  (if (> n 0)
		(begin (set! n (- n 1)) (mutex 'release) 'ok)
		(begin (mutex 'release) (acquire))))
	(define (release)
	  (mutex 'acquire)
	  (set! n (+ n 1))
	  (mutex 'release) 'ok)
	(define (dispatch m)
	  (cond ((eq? m 'acquire) acquire)
			((eq? m 'release) release)
			(else (error "no option -- MAKE-semaphore" m))))
	dispatch))
; b)
(define (make-semaphore n)
  (let ((cell (list #f)))
	  (define (the-semaphore m)
		(cond ((eq? m 'acquire)
			   (if (test-and-set! n acquire)
				 (the-semaphore 'acquire)))
			  ((eq? m 'release)
			   (test-and-set! n release))
			  (else error m)))))
(define (test-and-set! n m)
  (cond ((eq? m 'acquire)
		(if (> n 0) (begin (set! n (-  n 1)) #f)
		  #t))
		((eq? m 'release)
		 (set! n (+ n 1)))))

