; 3.22
(define (make-queue)
  (let ((front-prt '())
		(rear-prt '()))
	(define (empty-queue?) (null? front-prt))
	(define (set-front-ptr! item) (set! front-prt item))
	(define (set-rear-ptr!  item) (set! rear-prt  item))
	(define (front-queue)
	  (if (empty-queue?) 
		(error "front called with an empty queue" queue)))
	(define (insert-queue! item)
	  (let ((new-pair (cons item '())))
		(cond ((empty-queue?) 
			   (set-front-ptr! new-pair)
			   (set-rear-ptr!  new-pair))
			  (else
				(set-cdr! rear-prt new-pair)
				(set-rear-ptr! new-pair)))))
	(define (delete!)
	  (cond ((empty-queue?)
			 (error "delete! called with an empth queue" queue))
			(else
			  (set! front-prt (cdr front-prt)))))
	(define (ls) (display front-prt))
	;; op
	(define (dispatch m)
	  (cond ((eq? m 'insert) insert-queue!)
			((eq? m 'delete) (delete!))
			((eq? m 'ls) (ls))
			(else
			  (error "dispatch not option " m))))
	dispatch))
;; test
(define q (make-queue))
				  ((q 'insert) 'a)
(newline) (q 'ls) ((q 'insert) 'b)
(newline) (q 'ls) ((q 'insert) 'c)
(newline) (q 'ls) ((q 'insert) 'd)
(newline) (q 'ls) (q 'delete)
(newline) (q 'ls) (q 'delete)
(newline) (q 'ls) (q 'delete)
(newline) (q 'ls) (q 'delete)
(newline) (q 'ls)
