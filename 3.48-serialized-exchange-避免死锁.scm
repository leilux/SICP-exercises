; 3.48
(define counter 
  (let ((a 1)) (lambda () (set! a (+ a 1)))))

(define (make-account)
  (let ((num (counter)))
	(define (withdraw amount)
	  (if (>= balance amount)
		(begin (set! balance (- balance amount))
			   balance)
		"insufficient amount"))
	(define (deposit amount)
	  (set! balance (+ balance amount))
	  balance)
	(let ((balance-serializer (make-serializer)))
	  (define (dispatch m)
		(cond ((eq? m 'withdraw) withdraw)
			  ((eq? m 'deposit) deposit)
			  ((eq? m 'balance) balance)
			  ((eq? m 'get-num) num)
			  ((eq? m 'serializer) balance-serializer)
			  (else (error "unknown request -- make-account-and-serializer" m))))
	  dispatch)))

(define (exchange account1 account2)
  (let ((difference (- (account1 'balance)
					   (account2 'balance))))
	((account1 'withdraw) difference)
	((account2 'deposit) difference)))

(define (serialized-exchange account1 account2)
  (let ((serialized1 (account1 'serializer))
		(serialized2 (account2 'serializer))
		(num1 (account1 'get-num))
		(num2 (account2 'get-num)))
	(if (> num1 num2) 
	  ((serialized2 (serialized1 exchange)) account1 account2)
	  ((serialized1 (serialized2 exchange)) account1 account2))))								
